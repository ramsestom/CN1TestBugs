package org.tbdlab.test;

import static com.codename1.ui.CN.*;

import com.codename1.components.InteractionDialog;
import com.codename1.io.Log;
import com.codename1.ui.Button;
import com.codename1.ui.Container;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.Toolbar;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public void start() {
   	 if(current != null){
            current.show();
            return;
        }
        Form hi = new Form("Welcome", new BorderLayout(BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE));
        
        Overlay over = new Overlay();
        Container layerpane = (Container) hi.getFormLayeredPane(Overlay.class, true);
        layerpane.add(over);
        
        Button iAnimDialogButton = new Button("animated interactionDialog");
        iAnimDialogButton.addActionListener((e) -> {
        	InteractionDialog dlg = new InteractionDialog("Form Hello");
			dlg.setLayout(new BorderLayout());
			dlg.add(BorderLayout.CENTER, new Label("Hello Dialog from Form"));
			Button close = new Button("Close");
			close.addActionListener((ee) -> dlg.dispose());
			dlg.addComponent(BorderLayout.SOUTH, close);
			dlg.setFormMode(true);
			dlg.setAnimateShow(true);
			dlg.showPopupDialog(iAnimDialogButton);
        });
        
        Button iUnanimDialogButton = new Button("unanimated interactionDialog");
        iUnanimDialogButton.addActionListener((e) -> {
        	InteractionDialog dlg = new InteractionDialog("Form Hello");
			dlg.setLayout(new BorderLayout());
			dlg.add(BorderLayout.CENTER, new Label("Hello Dialog from Form"));
			Button close = new Button("Close");
			close.addActionListener((ee) -> dlg.dispose());
			dlg.addComponent(BorderLayout.SOUTH, close);
			dlg.setFormMode(true);
			dlg.setAnimateShow(false);
			dlg.showPopupDialog(iAnimDialogButton);
        });
        
        hi.addComponent(
        	BorderLayout.CENTER, 
        	BoxLayout.encloseY(iAnimDialogButton, iUnanimDialogButton)
        );
        
        hi.show();
   }

    public void stop() {
        current = Display.getInstance().getCurrent();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }
    
    public void destroy() {
    }

}
